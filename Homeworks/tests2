package evaluation.overloadoverr;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.file.Path;
import java.sql.SQLDataException;
import java.util.Date;

public class Catch extends Exception {

    public final void foo() {
        System.out.println("Foo");
    }


    @Override
    public Object getNumberOfCars() { -- консфликт, т.к в предке метод воид с таким же количеством парметров
        int year = getYear();//call the method from super class -- super.gerYear()
        return new Object;
    }

    @Override
    public static Date getTime() { -- можно не перопределять  - возвращает то же что и в предке
        return new Date();
    }

    protected Integer getPatientFromDatabase(File file, Integer number) throws SQLDataException {
        System.out.println("Integer");
        count = 1;                       -- нет переменной count
        return count;
    }

    private int getPatientFromDatabase(File file, int number) throws Exception {
        System.out.println("int");
        return 6;
    }

    public int getPatientFromDatabase(File file, int number, int years ) throws Exception {
        return 2;
    }

    public File getFileName(Path path) throws IOException, SQLDataException{
        return new File("./MyFile.txt");
    }


    Object calculate(String name, Integer count, BufferedReader bufferedReader) {
        return new Object();
    }

    public static void main(String[] args) {
        Catch aCatch = new Catch();
        System.out.println(aCatch.getPatientFromDatabase(new File(""), 2)); -- не ловится/прбрасывается ексепшен
    }

}

/////////////////////////////////////////////////////////////////////////////////////////////////

package evaluation.overloadoverr;

import java.io.File;
import java.io.FileNotFoundException;
import java.nio.file.Path;
import java.util.Date;

public class Exception {

    private int getYear() {
        return new Date().getYear(); -- более не используемый метод, рекомендуется использовать Calendar.get(Calendar.YEAR) - 1900 и он с JDK 1.0
    }

    public final void foo() {
        System.out.println("Foo");
    }

    private int count;

    public int getCount() {
        return count;
    }

    public void setCount(int count) {
        this.count = count;
    }

    public void getNumberOfCars() {
        System.out.println(5);
    }

    public Object getFileName(Path path) throws FileNotFoundException {
        File file = new File("./Text.txt"); -- File из JDK 1.0, в остальном вроде нормально
        return file;
    }

    public static Date getTime() {
        return new Date();
    }

    protected String calculate(String first, int count) {
        return "2*2=4";
    }
}

/////////////////////////////////////////////////////////////////////////////////////////////////

package evaluation.overloadoverr;

import java.io.File;
import java.io.FileNotFoundException;
import java.nio.file.Path;

public class Finally {

    public void getNumberOfCars() {
        System.out.println(5);
    }

    public Object getFileName(Path path) throws FileNotFoundException {
        File file = new File("./Text.txt"); -- File из JDK 1.0, в остальном вроде нормально
        return file;
    }

    protected String calculate(String first, int count) {
        return "2*2=4";
    }
}

/////////////////////////////////////////////////////////////////////////////////////////////////

package evaluation.trycatch;


import java.io.FileNotFoundException;
import java.io.IOException;

public class Try {


    public void print() { -- должно быть throws Exception


        if (1 == 1) {
            throw new IllegalArgumentException(); -- нет throws в заголовке метода
        }
        throw new NullPointerException();
          catch(Exception e){  -- должен быть try
            System.out.println(e.getMessage());
        } catch(NullPointerException e){ -- должен быть try
            System.out.println(e.getMessage());
        }

    }

    public void printMessage() {  -- нет throws в заголовке метода
        try {
            if (1 == 1) {
                throw new IllegalArgumentException();-- нет throws в заголовке метода
            }
            throw new NullPointerException();-- нет throws в заголовке метода
        }
        finalize() {
            throw new IOException();-- нет throws в заголовке метода, выдаст ошибку после пробрасывание вышестоящих ексепшенов
        }

    }

    public void getPatient() {
        throw new IOException();-- нет throws в заголовке метода
        throw new NullPointerException();-- нет throws в заголовке метода, нельзя пробросить второй эксепшен
    }

    protected void getClient() throws FileNotFoundException {
        try {
            throw new FileNotFoundException();
        } finally {
            throw new IOException(); -- нет throws в заголовке метода
        }
        throw new NullPointerException(); -- нет throws в заголовке метода
    }


    public int getMessage() {
        try {
            return 1;
        } catch (IllegalArgumentException | NullPointerException e) {

        } finally {
            return 2;
        }

    }

    public int getNumberOfFiles() throws FileNotFoundException {
        try {
            return 1;
        } catch (IllegalArgumentException | NullPointerException e) { -- нельзя переприсвоить значение для е которая final
            e = new NullPointerException();

        } finally {
            throw new NullPointerException();
        }

    }

    public static void main(String[] args) {
        Try aTry = new Try();
        System.out.println(aTry.getMessage());// what will be print in console -- 2

        try {
            aTry.getClient();
        } catch (NullPointerException e) {
            System.out.println(e.getMessage());
        }
    }
}
